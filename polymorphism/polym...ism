object is instance of a class.


//ask of respresenting same thing in different way.

        shapes circle=new circle();
here/..
        shapes=>>class name.
        circle=>>reference variable.
        circle()=>>default constructor of class.

//types of polymorphism...

1.compile time/static polymorphism
==> Achieve via method overloading meaning same name but type,arguments,return types ,ordering may be different.
eg.. multiple constructor...
  A a1=new A(1);
  A a2=new A(2,3);
  if the name is same..then argument or number of arguments should be different.

2.runtime/dynamic polymorphism
==>achieved by method overriding.

parent obj=new child();

here,which methd will be called depends on child();
and reference 
  This is known as upcasting.

  this is how overriding  works.
  //to stop overdide use final. called earlybinding.
  //can also be used to prevent inheritence.
  //also static does not override.

  ...how java determins this.?
  by dynamic method dispatch.